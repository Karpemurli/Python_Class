Python tuples
-------------------
- Python tuple is same as List.
- Python tuple is an immutable collection of different data type elements.
- Tuple are used to keep a list of immutable python objects.
- Once we declare the tuple we can not modify the element within the tuple.

Creating the tuple
-----------------------
- a tuple is formed by enclosing all the items in parentheses (), and each element is separated by commas.
- A tuple can include elements with different data types.

Example:
--------------
my_tuple = (1,44,78,45,"python")
print(my_tuple)

print("---------------------------------------------------------------")
for i in my_tuple:
    print(i)

OR
my_tuple = 1,45,88,56
print(my_tuple)
print(type(my_tuple))

Access the tuple elements
----------------------------
- Each item in a tuple has its own index value which start from zero.
- Index values are incremented by one.
- We can use the different methods to access the element from tuple.

1. Indexing Method:
-----------------------
- To retrieve an item in a tuple we can use the index operator [], where the index start from 0.
- Attempting to access an index that is not inside the tuple index will result in an IndexError.

Example:
--------------
my_tuple = 1,45,88,56
print(my_tuple[2])

OR
my_tuple = 1,45,88,56
print(my_tuple[5])

o/p:
-------
IndexError: tuple index out of range

2. Negative Indexing
-------------------------
Python support negative indexing also.The value of -1 denotes the last item, the index of -2 the second last element.

Example:
-----------
my_tuple = 1,45,88,56
print(my_tuple[-1]) # 56
print(my_tuple[-2]) # 88

3. Slicing:
---------------
If we wish to obtain a range of items from our tuple, then we use the concept of slicing.

Example:
------------
my_tuple = 1,45,88,56
print(my_tuple[1:3])

OR
my_tuple = 1,45,88,56
print(my_tuple[-1:-3:-1])

4. by using for loop:
--------------------------
my_tuple = 1,45,88,56
for i in my_tuple:
    print(i)

Changing the element
--------------------------
Tuples, unlike list, are immutable. This means that once we declare the tuple we can not modify the element from the tuple.
If you attempt to alter a tuple element you will receive a TypeError.

Example:
-------------
my_tuple = 1,45,88,56
my_tuple[1] = 100 #here we can alter the value.
print(my_tuple)

o/p
-------
TypeError: 'tuple' object does not support item assignment

Deleteing tuple
-------------------
We cannot delete the elements from tuple because tuple is immutable type of object. Suppose we can try to delete the
element from tuple it will display error message.

Example:
------------
my_tuple = 1,45,88,56
del my_tuple[1]
print(my_tuple)

o/p:
----
TypeError: 'tuple' object doesn't support item deletion

- You can delete the tuple but you cant delete the element which are present in tuple.
Example:
------
my_tuple = 1,45,88,56
del my_tuple
print(my_tuple)

o/p:
------
NameError: name 'my_tuple' is not defined

Built in Python tuple methods
-----------------------------------
1. len():  this method returns the total number of element present in tuple.
Example:
------------
my_tuple = 1,45,88,56
length = len(my_tuple)
print(length)

2. max(): This method returns the max number which are present in tuple.
Example:
-------
my_tuple = 1,45,88,56
print(max(my_tuple))

3. min(): This method returns the minimum element which are present in tuple.
Example:
------------
my_tuple = 1,45,88,56
print(min(my_tuple))

4. tuple(): This method can be used for to convert the string into tuple as well as list into tuple.
Example:
-----------
lst = [1,2,3,4]
print(type(lst))
print("After convert into tuple")
my_tuple = tuple(lst)
print(type(my_tuple))

5. membership operator(in, not in): Using the in and not in keyword we can determine whether or not an item
   exists in tuple.
Example:
---------
my_tuple = (2,4,5,67,7)
print(5 in my_tuple)
=================================================================